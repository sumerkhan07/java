In Java, a Map is a part of the Collection Framework, but it doesn't directly extend the Collection interface
because it stores data differently â€” as key-value pairs.
A Map allows you to store, retrieve, and manipulate data where each piece of data (value) is associated with a unique key.
This makes it very useful when you want to quickly look up information based on a key.

ðŸ“¦ Key Characteristics of Map
Stores key-value pairs â€“ Every value is associated with a unique key.
Keys are unique â€“ No two keys can be the same.
Values can be duplicated â€“ Multiple keys can have the same value.
Allows fast retrieval â€“ Lookup is efficient.
Implementations may or may not be ordered depending on the class.

âœ… Main Implementations of Map
Implementation	Description
HashMap	Stores key-value pairs with hashing. Fast, unordered, allows one null key and multiple null values.
LinkedHashMap	Maintains insertion order. Good when order matters.
TreeMap	Stores in sorted order by keys. Implemented as a red-black tree.
Hashtable	Synchronized version of HashMap. Legacy class.
ConcurrentHashMap	Thread-safe version optimized for concurrency.

Map Interface â€“ Important Methods
Method                                          	Description
put(K key, V value)                       	Adds or updates a key-value pair.
get(Object key)                           	Retrieves the value associated with the key.
remove(Object key)                        	Removes the key and its value.
containsKey(Object key)                   	Checks if the key exists.
containsValue(Object value)	                Checks if a value exists.
keySet()	                                  Returns all keys as a set.
values()	                                  Returns all values as a collection.
entrySet()	                                Returns all key-value pairs.



import java.util.*;
public class MapExample {
    public static void main(String[] args) {
        // Creating a HashMap
        Map<String, Integer> studentMarks = new HashMap<>();

        // Adding key-value pairs
        studentMarks.put("Alice", 90);
        studentMarks.put("Bob", 85);
        studentMarks.put("Charlie", 95);
        studentMarks.put("Bob", 88); // Updating Bob's score

        // Accessing value by key
        System.out.println("Alice's marks: " + studentMarks.get("Alice"));

        // Checking if a key exists
        if (studentMarks.containsKey("Charlie")) {
            System.out.println("Charlie's marks: " + studentMarks.get("Charlie"));
        }

        // Iterating through the map
        for (Map.Entry<String, Integer> entry : studentMarks.entrySet()) {
            System.out.println(entry.getKey() + " scored " + entry.getValue());
        }
    }
}

