Java in  Method.<br>
A method in Java is a block of code that performs a specific task.
It is similar to a function in other programming languages.<br>
You define a method once, and you can use (or "call") it multiple times.<br>
This helps avoid repetition, makes the code cleaner, and improves reusability.
<br>
Why use method.   <br>
To organize code logically  <br>
To avoid repetition         <br>
To divide a large program into smaller, manageable parts   <br>
To reuse the same logic multiple times.            <br>
Makes debugging and testing easier     <br>
Syntax of method 
returnType methodName(parameter1, parameter2, ...) {
    // method body (statements)
    return value; // if returnType is not void
}
<br>
//Example
public class Calculator {
    // method definition
    int add(int a, int b) {
        return a + b;
    }

    public static void main(String[] args) {
        Calculator obj = new Calculator();
        int result = obj.add(10, 5);
        System.out.println("Sum is: " + result);
    }
}


Method components 
  Part	                                     Description
returnType                   	Type of value the method returns (e.g., int, String, void)
methodName                     	Any valid name following Java naming rules
parameters                   	Input values (optional). Also called arguments
method body                 	Actual block of code that performs the task
return	                        Sends back the result (not used if returnType is void)

// greet 
import java.util.Scanner;
class greet
{
	public static void main(String[] args){
		Scanner sc=new Scanner(System.in);
		String ss=sc.next();
	String st=str(ss);
	System.out.println(st);
	}
	static String str(String greeting)
	{
		//System.out.println("Hello "+greeting);
		return greeting;
	}
}


we can call method in  two ways<br>
1) By usnig static method <br>
	BY using static method we the method directly.<br>
<br>
Eg.

class m1{
		public static void main(String[] args){
			int x=10,y=20;
			System.out.println(max(x,y));
		}
		public static int max(int a, int b){
			if(a> b)
				return a;
			else
				return b;
				
			}
}

<br>
2) BY using object method 

class m2{
		public static void main(String[] args){
			int x=10,y=20;
			System.out.println(max(x,y));
			m2  m=new m2();
				System.out.println(m.min(x,y));
		}
		public static int max(int a, int b){
			if(a> b)
				return a;
			else
				return b;
				
			}
		int min(int a, int b){
			if(a<b)
				return a;
			else
				return b;
			
		}
}
<br>
In  class having a diffrent method  we can give the same varible to he method.

<br>
Function Overloading (Method Overloading) in Java<br>
Function overloading (or method overloading) is a feature in Java that allows a class to have multiple methods with the same name but different parameters.<br>
It improves code readability and reusability by letting methods perform similar tasks in different ways.<br>

Key Points About Method Overloading
Same Method Name

Multiple methods share the same name.

Different Parameters

Must differ in:

Number of parameters

Data types of parameters

Order of parameters (if types are different)
